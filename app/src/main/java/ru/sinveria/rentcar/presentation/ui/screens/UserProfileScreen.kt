package ru.sinveria.rentcar.presentation.ui.screens

import android.content.Context
import android.graphics.BitmapFactory
import android.net.Uri
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ImageBitmap
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import ru.sinveria.rentcar.R
import ru.sinveria.rentcar.data.local.entity.UserEntity
import ru.sinveria.rentcar.presentation.viewmodel.UserProfileViewModel
import java.io.File

@Composable
fun UserProfileScreen(
    onNavigateBack: () -> Unit = {},
    viewModel: UserProfileViewModel = hiltViewModel()
) {
    val userData by viewModel.userData.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    LaunchedEffect(Unit) {
        viewModel.loadLastRegisteredUser()
    }

    if (isLoading) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator()
        }
    } else {
        UserProfileContent(
            userEntity = userData,
            onNavigateBack = onNavigateBack
        )
    }
}

@Composable
fun UserProfileContent(
    userEntity: UserEntity?,
    onNavigateBack: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp)
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.Start
    ) {
        Text(
            text = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            style = MaterialTheme.typography.headlineMedium,
            color = colorResource(id = R.color.accent_color),
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 24.dp)
        )

        // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        Text(
            text = "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        InfoRow("Email:", userEntity?.email ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–ò–º—è:", userEntity?.firstName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–§–∞–º–∏–ª–∏—è:", userEntity?.lastName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–û—Ç—á–µ—Å—Ç–≤–æ:", userEntity?.middleName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:", userEntity?.birthDate ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–ü–æ–ª:", userEntity?.gender ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:",
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        InfoRow("–ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:", userEntity?.licenseNumber ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        InfoRow("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:", userEntity?.licenseIssueDate ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:",
            style = MaterialTheme.typography.titleSmall,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            PhotoItem(
                label = "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è",
                imagePath = userEntity?.profilePhotoPath
            )
            PhotoItem(
                label = "–§–æ—Ç–æ –ø—Ä–∞–≤",
                imagePath = userEntity?.licensePhotoPath
            )
            PhotoItem(
                label = "–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                imagePath = userEntity?.passportPhotoPath
            )
        }

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        if (userEntity != null) {
            Text(
                text = "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Room",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = "üîê –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = "üì± –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                style = MaterialTheme.typography.bodyMedium
            )
        } else {
            Text(
                text = "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                style = MaterialTheme.typography.bodyMedium,
                color = colorResource(id = R.color.error_color)
            )
        }
    }
}

@Composable
fun PhotoItem(label: String, imagePath: String?, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        if (!imagePath.isNullOrEmpty()) {
            LoadImageFromUri(
                uri = imagePath,
                contentDescription = label,
                modifier = Modifier
                    .size(120.dp)
                    .clip(RoundedCornerShape(8.dp))
            )
        } else {
            Box(
                modifier = Modifier
                    .size(120.dp)
                    .clip(RoundedCornerShape(8.dp))
                    .background(Color.LightGray),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Gray
                )
            }
        }
    }
}

@Composable
fun LoadImageFromUri(
    uri: String,
    contentDescription: String,
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current
    var imageBitmap by remember { mutableStateOf<ImageBitmap?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(uri) {
        println("üñºÔ∏è DEBUG: Loading image from: $uri")
        try {
            val bitmap = if (uri.startsWith("content://")) {
                // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ content URI (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
                loadImageBitmapFromContentUri(context, uri)
            } else {
                // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—É—Ç–∏ (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
                loadImageBitmapFromFilePath(uri)
            }

            if (bitmap != null) {
                imageBitmap = bitmap
                println("‚úÖ DEBUG: Image loaded successfully")
            } else {
                errorMessage = "Failed to load image"
                println("‚ùå DEBUG: Failed to load image from: $uri")
            }
        } catch (e: Exception) {
            errorMessage = e.message
            println("üí• DEBUG: Error loading image: ${e.message}")
        } finally {
            isLoading = false
        }
    }

    // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –õ–û–ì–ò–ö–£ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:
    if (isLoading) {
        Box(
            modifier = modifier
                .background(Color.LightGray),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator(modifier = Modifier.size(24.dp))
        }
    } else if (imageBitmap != null) {
        Image(
            bitmap = imageBitmap!!,
            contentDescription = contentDescription,
            modifier = modifier,
            contentScale = ContentScale.Crop
        )
    } else {
        Box(
            modifier = modifier
                .background(Color.LightGray),
            contentAlignment = Alignment.Center
        ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text(
                    text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Red
                )
                Text(
                    text = errorMessage ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Red,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ content URI
private fun loadImageBitmapFromContentUri(context: Context, uriString: String): ImageBitmap? {
    return try {
        val uri = Uri.parse(uriString)
        val inputStream = context.contentResolver.openInputStream(uri)
        inputStream?.use { stream ->
            val bitmap = BitmapFactory.decodeStream(stream)
            bitmap?.asImageBitmap()
        }
    } catch (e: Exception) {
        null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ø—É—Ç–∏
private fun loadImageBitmapFromFilePath(filePath: String): ImageBitmap? {
    return try {
        val file = File(filePath)
        if (file.exists()) {
            val bitmap = BitmapFactory.decodeFile(filePath)
            bitmap?.asImageBitmap()
        } else {
            null
        }
    } catch (e: Exception) {
        null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ bitmap –∏–∑ URI
private fun loadImageBitmapFromUri(context: Context, uriString: String): ImageBitmap? {
    return try {
        println("üîç DEBUG: Parsing URI: $uriString")
        val uri = Uri.parse(uriString)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URI
        val inputStream = context.contentResolver.openInputStream(uri)
        if (inputStream == null) {
            println("‚ùå DEBUG: Cannot open input stream for URI: $uri")
            return null
        }

        inputStream.use { stream ->
            val options = BitmapFactory.Options().apply {
                inJustDecodeBounds = false
                inSampleSize = 2 // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            }

            val bitmap = BitmapFactory.decodeStream(stream, null, options)
            if (bitmap == null) {
                println("‚ùå DEBUG: BitmapFactory returned null")
                return null
            }

            println("‚úÖ DEBUG: Bitmap loaded - width: ${bitmap.width}, height: ${bitmap.height}")
            bitmap.asImageBitmap()
        }
    } catch (e: SecurityException) {
        println("üîê DEBUG: Security exception - permission denied for URI: $uriString")
        null
    } catch (e: Exception) {
        println("üí• DEBUG: Exception loading image: ${e.message}")
        e.printStackTrace()
        null
    }
}

@Composable
fun InfoRow(label: String, value: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        horizontalArrangement = Arrangement.Start
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.width(150.dp)
        )
        Text(
            text = if (value.isNotEmpty()) value else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            style = MaterialTheme.typography.bodyMedium,
            color = colorResource(id = R.color.input_text)
        )
    }
}